import asyncio
import logging
import pytz
import datetime
import aiohttp
import requests
import os
import time
from binance.client import Client
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class TimeService:
    def __init__(self, use_binance_time=False):
        self.timeframe_minutes = {
            '5m': 5, '15m': 15, '30m': 30,
            '1h': 60, '4h': 240, '1d': 1440
        }
        self.use_binance_time = use_binance_time
        self.binance_server_time_diff = 0
        self.last_sync_time = 0

    async def sync_binance_time(self):
        try:
            url = "https://api.binance.com/api/v3/time"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        binance_server_time = data['serverTime'] / 1000
                        local_time = datetime.now().timestamp()
                        self.binance_server_time_diff = binance_server_time - local_time
                        self.last_sync_time = local_time
                        logger.info(f"Synced with Binance time. Diff: {self.binance_server_time_diff:.2f}s")
        except Exception as e:
            logger.error(f"Error syncing with Binance: {e}")

    def get_current_time(self):
        if self.use_binance_time:
            local_time = datetime.now().timestamp()
            if local_time - self.last_sync_time > 3600:
                asyncio.create_task(self.sync_binance_time())

            binance_timestamp = local_time + self.binance_server_time_diff
            return datetime.fromtimestamp(binance_timestamp, pytz.UTC)
        else:
            return datetime.now()

    async def get_time_to_candle_close(self, timeframe):
        now = self.get_current_time()

        if timeframe not in self.timeframe_minutes:
            return 0

        minutes = self.timeframe_minutes[timeframe]
        current_minute = now.minute
        remainder = current_minute % minutes
        minutes_remaining = minutes - remainder

        close_time = now.replace(second=0, microsecond=0) + timedelta(minutes=minutes_remaining)
        seconds_remaining = max(0, int((close_time - now).total_seconds()))

        return seconds_remaining

    async def get_time_to_next_hour(self):
        """–í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞"""
        now = self.get_current_time()
        next_hour = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        seconds_remaining = max(0, int((next_hour - now).total_seconds()))
        return seconds_remaining

    @staticmethod
    async def format_time_remaining(seconds):
        if seconds >= 3600:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            secs = seconds % 60
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        elif seconds >= 60:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes:02d}:{secs:02d}"
        else:
            return f"{seconds:02d}—Å"

class FilePriceMonitor:
    def __init__(self, file_path="C:/QUIK_DATA/price.txt"):
        self.file_path = file_path
        self.setup_environment()

    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        directory = os.path.dirname(self.file_path)
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

        if not os.path.exists(self.file_path):
            with open(self.file_path, 'w', encoding='utf-8') as f:
                f.write("")
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.file_path}")

        print(f"‚úì –§–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {self.file_path}")

    def read_prices(self):
        """–ß—Ç–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.file_path):
                with open(self.file_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()

                    if content:
                        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: GLDRUBF:—Ü–µ–Ω–∞ IMOEXF:—Ü–µ–Ω–∞ NASD:—Ü–µ–Ω–∞
                        prices = {}
                        parts = content.split()
                        for part in parts:
                            if ':' in part:
                                symbol, price_str = part.split(':', 1)
                                if self.is_float(price_str):
                                    prices[symbol] = float(price_str)
                        return prices

            return {}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {}

    def is_float(self, value):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float"""
        try:
            float(value)
            return True
        except ValueError:
            return False

class OrderBlockDetector:
    def __init__(self, asset_name, timeframe, bot_token, chat_id, price_monitor=None, use_file_data=False):
        self.asset_name = asset_name
        self.timeframe = timeframe
        self.price_monitor = price_monitor
        self.use_file_data = use_file_data
        self.time_service = TimeService(use_binance_time=not use_file_data)
        self.BOT_TOKEN = bot_token
        self.CHAT_ID = chat_id
        self.previous_close = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        if not use_file_data:
            self.client = Client()

    def send_telegram_message(self, message_text):
        url = f"https://api.telegram.org/bot{self.BOT_TOKEN}/sendMessage"
        data = {'chat_id': self.CHAT_ID, 'text': message_text}

        try:
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False

    def get_current_price(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ Binance"""
        try:
            if self.use_file_data:
                prices = self.price_monitor.read_prices()
                return prices.get(self.asset_name)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Binance API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                price = float(self.client.get_symbol_ticker(symbol=self.asset_name)['price'])
                return price
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {self.asset_name}: {e}")
            return None

    def analyze_candle_pattern(self, previous_candle, current_candle):
        prev_change = previous_candle['change']
        curr_change = current_candle['change']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        if (prev_change * curr_change < 0) and (abs(curr_change) / abs(prev_change) > 2):
            return "GREEN" if curr_change > 0 else "RED"
        return False

    async def start_detection(self):
        candle_history = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–æ–≤
        asset_type = "–§–ê–ô–õ" if self.use_file_data else "BINANCE"

        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ {self.asset_name} {self.timeframe} ({asset_type})")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è Binance
        if not self.use_file_data:
            await self.time_service.sync_binance_time()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏
        initial_price = self.get_current_price()
        if initial_price is not None:
            # –°–æ–∑–¥–∞–µ–º "–Ω—É–ª–µ–≤—É—é" —Å–≤–µ—á—É –¥–ª—è –Ω–∞—á–∞–ª–∞
            initial_candle = {
                "open": initial_price,
                "close": initial_price,
                "change": 0
            }
            candle_history.append(initial_candle)
            print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {self.asset_name}: {initial_price}")

        try:
            while True:
                wait_time = await self.time_service.get_time_to_candle_close(self.timeframe)

                if wait_time > 1:
                    formatted_time = await self.time_service.format_time_remaining(wait_time)
                    print(f"‚è∞ {self.asset_name} {self.timeframe}: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏: {formatted_time}")
                    await asyncio.sleep(wait_time)
                else:
                    await asyncio.sleep(1)
                    continue

                # –ú–û–ú–ï–ù–¢ –ó–ê–ö–†–´–¢–ò–Ø –°–í–ï–ß–ò - –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                current_price = self.get_current_price()
                if current_price is None:
                    print(f"‚ö†Ô∏è {self.asset_name}: –¶–µ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—á—É")
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
                if len(candle_history) > 0:
                    # –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ = —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    open_price = candle_history[-1]['close']
                else:
                    open_price = current_price

                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
                current_candle = {
                    "open": open_price,
                    "close": current_price,
                    "change": current_price - open_price
                }

                print(f"üéØ {self.asset_name} {self.timeframe}: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–µ—á–∏ - Open: {open_price:.2f}, Close: {current_price:.2f}, Change: {current_candle['change']:.2f}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                candle_history.append(current_candle)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 2 —Å–≤–µ—á–∞–º–∏
                if len(candle_history) > 2:
                    candle_history = candle_history[-2:]

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –µ—Å—Ç—å 2 —Å–≤–µ—á–∏
                if len(candle_history) == 2:
                    order_block_status = self.analyze_candle_pattern(candle_history[0], candle_history[1])

                    if order_block_status:
                        message = f"{self.asset_name}\n–¢–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}\n–¢–∏–ø: {order_block_status} ({candle_history[0]['change']:+.2f}) ‚Üí ({candle_history[1]['change']:+.2f})"
                        self.send_telegram_message(message)
                        print(f"‚úÖ {self.asset_name} {self.timeframe}: –û–†–î–ï–†–ë–õ–û–ö –ù–ê–ô–î–ï–ù - {order_block_status}")
                    else:
                        print(f"‚ùå {self.asset_name} {self.timeframe}: Order Block –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

        except KeyboardInterrupt:
            print(f"\nüì¢ –°–µ—Ä–≤–∏—Å {self.asset_name} {self.timeframe} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ {self.asset_name} {self.timeframe}: {e}")

async def monitor_file_prices(price_monitor):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    while True:
        prices = price_monitor.read_prices()
        timestamp = datetime.now().strftime('%H:%M:%S')

        if prices:
            price_display = " | ".join([f"{asset}: {price:>8.2f}" for asset, price in prices.items()])
            print(f"{timestamp} | {price_display}")
        else:
            print(f"{timestamp} | –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

        await asyncio.sleep(2)

def get_telegram_credentials():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ chat ID —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    print("ü§ñ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ Telegram –±–æ—Ç–∞:")
    bot_token = input("–¢–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
    chat_id = input("Chat ID: ").strip()

    if not bot_token or not chat_id:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat ID –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
        return get_telegram_credentials()

    return bot_token, chat_id

async def main():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –±–æ—Ç–∞
    BOT_TOKEN, CHAT_ID = get_telegram_credentials()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ Telegram –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    price_monitor = FilePriceMonitor("C:/QUIK_DATA/price.txt")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–∏
    time_service_binance = TimeService(use_binance_time=True)
    time_service_file = TimeService(use_binance_time=False)

    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞...")

    # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
    wait_time = await time_service_binance.get_time_to_next_hour()
    if wait_time > 0:
        formatted_time = await time_service_binance.format_time_remaining(wait_time)
        print(f"üïí –î–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞: {formatted_time}")
        await asyncio.sleep(wait_time)

    print("‚úÖ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞—Å–∞, –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤...")

    # –°–û–ó–î–ê–ï–ú –í–°–ï –î–ï–¢–ï–ö–¢–û–†–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
    detectors = []

    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (Binance) - –≤—Å–µ –∞–∫—Ç–∏–≤—ã –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö 1h, 4h, 1d
    crypto_assets = ['BTCUSDT', 'ETHUSDT']
    crypto_timeframes = ['1h', '4h', '1d']

    for asset in crypto_assets:
        for timeframe in crypto_timeframes:
            detector = OrderBlockDetector(
                asset_name=asset,
                timeframe=timeframe,
                bot_token=BOT_TOKEN,
                chat_id=CHAT_ID,
                price_monitor=None,
                use_file_data=False
            )
            detectors.append(detector)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ç–µ–∫—Ç–æ—Ä –ö–†–ò–ü–¢–ê: {asset} {timeframe}")

    # –§–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—Å–µ –∞–∫—Ç–∏–≤—ã –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö 1h, 4h
    file_assets = ['GLDRUBF', 'IMOEXF', 'NASD']
    file_timeframes = ['1h', '4h']

    for asset in file_assets:
        for timeframe in file_timeframes:
            detector = OrderBlockDetector(
                asset_name=asset,
                timeframe=timeframe,
                bot_token=BOT_TOKEN,
                chat_id=CHAT_ID,
                price_monitor=price_monitor,
                use_file_data=True
            )
            detectors.append(detector)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ç–µ–∫—Ç–æ—Ä –§–ê–ô–õ: {asset} {timeframe}")

    print(f"\nüìä –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(detectors)} –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:")
    print(f"   - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {len(crypto_assets)} –∞–∫—Ç–∏–≤–æ–≤ √ó {len(crypto_timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ = {len(crypto_assets) * len(crypto_timeframes)}")
    print(f"   - –§–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(file_assets)} –∞–∫—Ç–∏–≤–æ–≤ √ó {len(file_timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ = {len(file_assets) * len(file_timeframes)}")
    print("üü¢ –ó–∞–ø—É—Å–∫ –í–°–ï–• –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [detector.start_detection() for detector in detectors]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    tasks.append(monitor_file_prices(price_monitor))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    await asyncio.gather(*tasks, return_exceptions=True)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüì¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")